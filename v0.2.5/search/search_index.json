{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hypline","text":"<p>Hypline is a Python package that provides a CLI tool for cleaning and analyzing data from hyperscanning studies involving dyadic conversations.</p>"},{"location":"#installation","title":"Installation","text":"<p>Hypline can be installed using <code>pip</code> or other package managers such as <code>uv</code> and <code>poetry</code>.</p> pipuvpoetry <pre><code>pip install hypline\n</code></pre> <pre><code>uv add hypline\n</code></pre> <pre><code>poetry add hypline\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Once the package is installed, <code>hypline</code> command will be available, like so:</p> <pre><code>hypline --help\n</code></pre> <p>Running the above will display an overview of the tool, including supported subcommands.</p> <p>For instance, <code>clean</code> is a subcommand for performing confound regression to clean BOLD outputs from fMRIPrep, and its details can be viewed by running:</p> <pre><code>hypline clean --help\n</code></pre>"},{"location":"#what-next","title":"What Next","text":"<p>Please check out user guides for more detailed instructions and examples.</p>"},{"location":"guides/clean/","title":"Cleaning BOLD Data","text":""},{"location":"guides/clean/#overview","title":"Overview","text":"<p>Hypline supports confound regression to clean BOLD outputs from fMRIPrep.</p> <p>Specifically, the <code>clean</code> subcommand supports this, and its details can be checked by running:</p> <pre><code>hypline clean --help\n</code></pre> <p>The <code>clean</code> subcommand takes in three required arguments:</p> Argument Description <code>fmriprep_dir</code> Directory containing fMRIPrep outputs <code>config_file</code> Configuration file containing model specs, etc. <code>model_name</code> Confound regression model to run (defined in configuration) <p>and several options:</p> Option Description Default <code>--output-dir</code> Directory to store cleaned BOLD data <code>&lt;fmriprep_dir&gt;_cleaned</code> <code>--custom-confounds-dir</code> Directory containing custom confounds None <code>--subject-ids</code> Target subject IDs (comma-separated) All <code>--session-name</code> Target session name All <code>--task-name</code> Target task name All <code>--data-space-name</code> Target BOLD data space <code>MNI152NLin2009cAsym</code> <code>--n-processes</code> Number of processes to run in parallel <code>1</code> <p>Info</p> <p>Hypline supports the following data spaces at the moment:</p> <ul> <li><code>fsaverage5</code></li> <li><code>fsaverage6</code></li> <li><code>MNI152NLin6Asym</code></li> <li><code>MNI152NLin2009cAsym</code></li> </ul>"},{"location":"guides/clean/#example","title":"Example","text":"<p>For illustration, consider we have the fMRIPrep outputs stored in the following location:</p> <pre><code>data/\n\u2514\u2500\u2500 derivatives/\n    \u2514\u2500\u2500 fmriprep/\n        \u251c\u2500\u2500 logs/\n        \u251c\u2500\u2500 sub-003/\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"guides/clean/#setting-up-configuration","title":"Setting up configuration","text":"<p>We can start by defining the desired confound regression model(s) in the configuration file, like so:</p> config.yaml<pre><code>model_specs:\n\n  default:\n    confounds:\n      - \"trans_x\"\n      - \"trans_y\"\n      - \"trans_z\"\n      - \"rot_x\"\n      - \"rot_y\"\n      - \"rot_z\"\n      - \"cosine\"\n    aCompCor:\n      - n_comps: 5\n        mask: \"CSF\"\n      - n_comps: 5\n        mask: \"WM\"\n\n  default_task:\n    confounds:\n      - \"trans_x\"\n      - \"trans_y\"\n      - \"trans_z\"\n      - \"rot_x\"\n      - \"rot_y\"\n      - \"rot_z\"\n      - \"cosine\"\n    custom_confounds:\n      - \"trial_boxcar\"\n      - \"prompt_boxcar\"\n      - \"speech_boxcar\"\n      - \"listen_boxcar\"\n      - \"button_press\"\n      - \"receive_press\"\n      - \"screen_change\"\n    aCompCor:\n      - n_comps: 5\n        mask: \"CSF\"\n      - n_comps: 5\n        mask: \"WM\"\n</code></pre> <p>Info</p> <p>The configuration file above defines two models, named <code>default</code> and <code>default_task</code>, respectively. The <code>default</code> model is defined to use standard and CompCor confounds from fMRIPrep outputs (i.e., <code>confounds</code> and <code>aCompCor</code> sections above, respectively). The <code>default_task</code> model is defined to use custom confounds (i.e., <code>custom_confounds</code> section above) in addition to confounds from fMRIPrep outputs.</p> <p>Note</p> <p>Configuration should be provided as a valid YAML file. Check this tutorial to learn the basics of YAML.</p> <p>We can store the configuration file anywhere we want. Let's say we stored it as follows:</p> <pre><code>data/\n\u2514\u2500\u2500 derivatives/\n    \u251c\u2500\u2500 hypline/\n    \u2502   \u2514\u2500\u2500 config.yaml\n    \u2514\u2500\u2500 fmriprep/\n        \u251c\u2500\u2500 logs/\n        \u251c\u2500\u2500 sub-003/\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"guides/clean/#using-custom-confounds","title":"Using custom confounds","text":"<p>If the model involves custom confounds, we should provide the data as subject-level TSV files that each contain a given subject\u2019s confound values per TR. Hence, each TSV file will be a tabular data of shape \\(n \\times m\\), where \\(n\\) equals the number of total TRs in a run and \\(m\\) equals the number of custom confounds. With the current directory structure, we may prepare custom confounds as follows:</p> <pre><code>data/\n\u2514\u2500\u2500 derivatives/\n    \u251c\u2500\u2500 hypline/\n    \u2502   \u251c\u2500\u2500 config.yaml\n    \u2502   \u2514\u2500\u2500 custom_confounds/\n    \u2502       \u251c\u2500\u2500 sub-003/ses-1/func/\n    \u2502       \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_desc-customConfounds_timeseries.tsv\n    \u2502       \u2502   \u2514\u2500\u2500 ...\n    \u2502       \u2514\u2500\u2500 ...\n    \u2502\n    \u2514\u2500\u2500 fmriprep/\n        \u251c\u2500\u2500 logs/\n        \u251c\u2500\u2500 sub-003/ses-1/func/\n        \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_desc-confounds_timeseries.tsv\n        \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_space-fsaverage6_hemi-L_bold.func.gii\n        \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_space-fsaverage6_hemi-R_bold.func.gii\n        \u2502   \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 ...\n</code></pre> <p>Note</p> <p>The custom confound TSV file should have the same name as its corresponding standard confound TSV file, except for the description (i.e., <code>desc</code> entity).</p>"},{"location":"guides/clean/#running-the-command","title":"Running the command","text":"<p>With this setup, we can run the following to clean surface-level BOLD data for all subjects:</p> <pre><code>hypline  clean  \\\n  data/derivatives/fmriprep/  \\\n  data/derivatives/hypline/config.yml  \\\n  default_task  \\\n  --custom-confounds-dir  data/derivatives/hypline/custom_confounds/  \\\n  --data-space  fsaverage6  \\\n  --n-processes  8\n</code></pre> <p>Note that we are here leveraging multiprocessing (i.e., 8 parallel processes) to speed up the cleaning.</p>"},{"location":"guides/clean/#outputs","title":"Outputs","text":"<p>The cleaned data will then be stored in the designated location<sup>1</sup> as follows:</p> <pre><code>data/\n\u2514\u2500\u2500 derivatives/\n    \u251c\u2500\u2500 hypline/\n    \u2502   \u251c\u2500\u2500 config.yaml\n    \u2502   \u2514\u2500\u2500 custom_confounds/ses-1/func/\n    \u2502       \u251c\u2500\u2500 sub-003/\n    \u2502       \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_desc-customConfounds_timeseries.tsv\n    \u2502       \u2502   \u2514\u2500\u2500 ...\n    \u2502       \u2514\u2500\u2500 ...\n    \u2502\n    \u251c\u2500\u2500 fmriprep/\n    \u2502   \u251c\u2500\u2500 logs/\n    \u2502   \u251c\u2500\u2500 sub-003/ses-1/func/\n    \u2502   \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_desc-confounds_timeseries.tsv\n    \u2502   \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_space-fsaverage6_hemi-L_bold.func.gii\n    \u2502   \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_space-fsaverage6_hemi-R_bold.func.gii\n    \u2502   \u2502   \u2514\u2500\u2500 ...\n    \u2502   \u2514\u2500\u2500 ...\n    \u2502\n    \u2514\u2500\u2500 fmriprep_cleaned/\n        \u251c\u2500\u2500 logs/\n        \u2502   \u251c\u2500\u2500 sub-003.log\n        \u2502   \u2514\u2500\u2500 ...\n        \u251c\u2500\u2500 sub-003/ses-1/func/\n        \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_space-fsaverage6_hemi-L_desc-clean_bold.func.gii\n        \u2502   \u251c\u2500\u2500 sub-003_ses-1_task-Conv_run-1_space-fsaverage6_hemi-R_desc-clean_bold.func.gii\n        \u2502   \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 ...\n</code></pre> <p>As shown above, the cleaned data files will be of the same format as their corresponding originals. In fact, their data dimension and other metadata will be the same as the originals, with the only difference being values in the data.</p> <p>Note that log files are automatically generated to record the details of the cleaning process, which will be useful for reproducibility.</p> <ol> <li> <p>In this case, the default value (<code>&lt;fmriprep_dir&gt;_cleaned</code>) is used because the given command does not explicitly specify the output directory (<code>--output-dir</code>).\u00a0\u21a9</p> </li> </ol>"}]}